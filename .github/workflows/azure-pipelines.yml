trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  DB_HOST: 'db-rcha5267.mysql.database.azure.com'
  DB_USER: 'rootdb'
  DB_NAME: 'studentdb1'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'

- script: |
    pip install mysql-connector-python
  displayName: 'Install MySQL Connector'

- script: |
    python -c "
    import mysql.connector
    import sys
    try:
        conn = mysql.connector.connect(
            host='${{ variables.DB_HOST }}',
            user='${{ variables.DB_USER }}',
            password='$(DB_PASSWORD)',  # Secret variable
            database='${{ variables.DB_NAME }}'
        )
        cursor = conn.cursor()
        with open('create_table.sql', 'r') as file:
            cursor.execute(file.read())
        conn.commit()
        print('Successfully executed create_table.sql.')
    except Exception as e:
        print(f'Error running create_table.sql: {e}')
        sys.exit(1)
    finally:
        if conn:
            conn.close()
    "
  displayName: 'Run create_table.sql'

- script: |
    python -c "
    import mysql.connector
    import sys
    try:
        conn = mysql.connector.connect(
            host='${{ variables.DB_HOST }}',
            user='${{ variables.DB_USER }}',
            password='$(DB_PASSWORD)',  # Secret variable
            database='${{ variables.DB_NAME }}'
        )
        cursor = conn.cursor()
        with open('update_table.sql', 'r') as file:
            cursor.execute(file.read())
        conn.commit()
        print('Successfully executed update_table.sql.')
    except Exception as e:
        print(f'Error running update_table.sql: {e}')
        sys.exit(1)
    finally:
        if conn:
            conn.close()
    "
  displayName: 'Run update_table.sql'

- script: |
    python -c "
    import mysql.connector
    import sys
    try:
        conn = mysql.connector.connect(
            host='${{ variables.DB_HOST }}',
            user='${{ variables.DB_USER }}',
            password='$(DB_PASSWORD)',  # Secret variable
            database='${{ variables.DB_NAME }}'
        )
        cursor = conn.cursor()
        cursor.execute(\"SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Students' AND COLUMN_NAME = 'Email';\")
        result = cursor.fetchone()
        if result:
            print('Column exists: Validation successful.')
        else:
            print('Validation failed: Column does not exist.')
            sys.exit(1)
    except Exception as e:
        print(f'Error during validation: {e}')
        sys.exit(1)
    finally:
        if conn:
            conn.close()
    "
  displayName: 'Validate schema update'
